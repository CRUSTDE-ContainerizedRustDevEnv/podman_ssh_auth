var searchIndex = new Map(JSON.parse('[\
["podman_ssh_auth",{"doc":"src/bin/podman_ssh_auth/main.rs","t":"HHHH","n":["main","panic_set_hook","print_help","tracing_init"],"q":[[0,"podman_ssh_auth"],[4,"core::panic::panic_info"]],"d":["entry point into the bin-executable","The original Rust report of the panic is ugly for the end …","print help","Initialize tracing to file logs/automation_tasks_rs.log"],"i":[0,0,0,0],"f":"{{}b}{db}11","c":[],"p":[[1,"unit"],[5,"PanicInfo",4]],"b":[]}],\
["podman_ssh_auth_lib",{"doc":"podman_ssh_auth","t":"SSSSSCCHCPPPPGPPIPNNNNNNNNNNNNNNNHSFKSSSSNNCCCMNNCCNNNNFNNNNNNNOONNNNFNNNONNNNNNONNNNFNNNNNNOONNNNFNNONNNNNNNNNFNNNOHNNNNNNONNNN","n":["BLUE","GREEN","RED","RESET","YELLOW","error_mod","podman_mod","push","secrets_always_local_mod","Err","ErrorFromStr","ErrorFromString","InfallibleError","LibError","Ok","ParseIntError","ResultWithLibError","StdIoError","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","push","BLUE","EncryptedString","ExposeSecret","GREEN","RED","RESET","YELLOW","borrow","borrow_mut","decrypt_mod","docker_hub_mod","encrypt_mod","expose_secret","from","into","secrecy_mod","ssh_mod","try_from","try_into","type_id","vzip","Decryptor","borrow","borrow_mut","decrypt_symmetric","from","into","new_for_decrypt","return_secret_string","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","DockerHubClient","borrow","borrow_mut","decrypt_secret_token_in_memory","encrypted_token","from","into","new_interactive_input_secret_token","new_with_stored_secret_token","new_wo_secret_token","push_to_docker_hub","session_passcode","try_from","try_into","type_id","vzip","Encryptor","borrow","borrow_mut","encrypt_symmetric","from","into","new_for_encrypt","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","SecretEncryptedString","borrow","borrow_mut","encrypted_string","expose_decrypted_secret","from","into","new_with_secret_string","new_with_string","try_from","try_into","type_id","vzip","SshContext","borrow","borrow_mut","decrypt_from_file_data","decrypted_string","expand_path_check_private_key_exists","from","get_decrypted_string","get_secret_token_and_encrypt","into","new","sign_with_ssh_agent_or_identity_file","signed_passcode_is_a_secret","try_from","try_into","type_id","vzip"],"q":[[0,"podman_ssh_auth_lib"],[9,"podman_ssh_auth_lib::error_mod"],[33,"podman_ssh_auth_lib::podman_mod"],[34,"podman_ssh_auth_lib::secrets_always_local_mod"],[55,"podman_ssh_auth_lib::secrets_always_local_mod::decrypt_mod"],[69,"podman_ssh_auth_lib::secrets_always_local_mod::docker_hub_mod"],[85,"podman_ssh_auth_lib::secrets_always_local_mod::encrypt_mod"],[98,"podman_ssh_auth_lib::secrets_always_local_mod::secrecy_mod"],[111,"podman_ssh_auth_lib::secrets_always_local_mod::ssh_mod"],[128,"core::fmt"],[129,"core::fmt"],[130,"std::io::error"],[131,"core::num::error"],[132,"core::error"],[133,"core::option"],[134,"alloc::string"],[135,"core::result"],[136,"core::any"],[137,"secrecy::vec"],[138,"secrecy::string"],[139,"camino"],[140,"camino"]],"d":["ANSI color","ANSI color","ANSI color","ANSI color","ANSI color","Error library for this crate using thiserror","","push to docker hub retrieving the secret_token from …","","Contains the error value","","","","Enum of possible errors from this library","Contains the success value","","Result type alias with fixed LibError using thiserror","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","push to docker hub retrieving the secret_token from …","ANSI color","A simple wrapper new-type around String just to show …","Expose a reference to an inner secret","ANSI color","Secrets like GitHub API secret_token, crates.io secret …","ANSI color","ANSI color","","","","Push to docker-hub needs the docker hub secret_token. This …","","Expose secret: this is the only method providing access to …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The crate secrecy is probably great. But I want to encrypt …","","","","","","The secrets must not leave this crate. They are never …","","","Decrypts encrypted_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Struct DockerHubClient contains only private fields This …","","","decrypts the secret_token in memory","private field is set only once in the new() constructor","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new DockerHub client","Use the stored docker hub secret_token","Create new DockerHub client without secret_token","Push to docker hub","Passcode for encrypt the secret_token to encrypted_token …","","","","","The secrets must not leave this crate. They are never …","","","Encrypts secret_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","decrypt from file data and write the decrypted secret in …","","Expand path and check if identity file exists","Returns the argument unchanged.","","get secret_token and encrypt","Calls <code>U::from(self)</code>.","","Sign with ssh-agent or with identity_file","","","","",""],"i":[0,0,0,0,0,0,0,0,0,27,3,3,3,0,27,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,16,16,0,0,0,14,16,16,0,0,16,16,16,16,0,15,15,15,15,15,15,15,15,15,15,15,15,15,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,0,23,23,23,23,23,23,23,23,23,23,23],"f":"```````{bd}``````````{ce{}{}}0{{fh}j}0{cc{}}{lf}{nf}{A`f}5{f{{Ad{Ab}}}}{cAf{}}{c{{Ah{e}}}{}{}}0{cAj{}}9:```````99```{Alc{}}8:``221:`::{{AnB`}d}9;{{{Bd{Bb}}}An}{AnBf}``554=`=={BhBf}`<>{{}Bh}{{bb}Bh}1{{Bhbb}d}`998{ce{}{}}`00{Bj{{Ad{B`}}}}{cc{}}2{{Bf{Bd{Bb}}}Bj}``==<3`33`{{Bl{Bd{Bb}}}Bf}24{{Bf{Bd{Bb}}}Bl}{{Af{Bd{Bb}}}Bl}{c{{Ah{e}}}{}{}}0{cAj{}}8`88{{BnB`}d}`{C`Cb}8{BnBf}{BnB`}<{{}Bn}{{BnC`{Cd{Bb}}}d}`776>","c":[],"p":[[1,"str"],[1,"unit"],[6,"LibError",9],[5,"Formatter",128],[8,"Result",128],[6,"Infallible",129],[5,"Error",130],[5,"ParseIntError",131],[10,"Error",132],[6,"Option",133],[5,"String",134],[6,"Result",135],[5,"TypeId",136],[10,"ExposeSecret",34],[5,"Decryptor",55],[5,"EncryptedString",34],[1,"u8"],[8,"SecretVec",137],[8,"SecretString",138],[5,"DockerHubClient",69],[5,"Encryptor",85],[5,"SecretEncryptedString",98],[5,"SshContext",111],[5,"Utf8Path",139],[5,"Utf8PathBuf",139],[1,"array"],[8,"ResultWithLibError",9]],"b":[[20,"impl-Display-for-LibError"],[21,"impl-Debug-for-LibError"],[23,"impl-From%3CInfallible%3E-for-LibError"],[24,"impl-From%3CError%3E-for-LibError"],[25,"impl-From%3CParseIntError%3E-for-LibError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
