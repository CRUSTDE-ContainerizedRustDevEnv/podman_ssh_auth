var searchIndex = new Map(JSON.parse('[\
["podman_ssh_auth",{"doc":"src/bin/podman_ssh_auth/main.rs","t":"HHHH","n":["main","panic_set_hook","print_help","tracing_init"],"q":[[0,"podman_ssh_auth"],[4,"core::panic::panic_info"]],"d":["entry point into the bin-executable","The original Rust report of the panic is ugly for the end …","print help","Initialize tracing to file logs/automation_tasks_rs.log"],"i":[0,0,0,0],"f":"{{}b}{db}11","c":[],"p":[[1,"unit"],[5,"PanicInfo",4]],"b":[]}],\
["podman_ssh_auth_lib",{"doc":"podman_ssh_auth","t":"SSSSSCHCHCCPPPPGPPIPNNNNNNNNNNNNNNNHHCCCCCFNNNNNNNOONNNNFNNNONNNNNNONNNNFNNNNNNOONNNNFNNONNNNNNNNNFNNNOHNNNNNNONNNNFKMNMNNNNNMNMNOOONNNN","n":["BLUE","GREEN","RED","RESET","YELLOW","error_mod","login","podman_mod","push","secrets_always_local_mod","shell_mod","Err","ErrorFromStr","ErrorFromString","InfallibleError","LibError","Ok","ParseIntError","ResultWithLibError","StdIoError","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","login","push","decrypt_mod","docker_hub_mod","encrypt_mod","secrecy_mod","ssh_mod","Decryptor","borrow","borrow_mut","decrypt_symmetric","from","into","new_for_decrypt","return_secret_string","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","DockerHubClient","borrow","borrow_mut","decrypt_token_in_memory","encrypted_token","from","into","new_interactive_input_token","new_with_stored_token","new_wo_token","push_to_docker_hub","session_passcode","try_from","try_into","type_id","vzip","Encryptor","borrow","borrow_mut","encrypt_symmetric","from","into","new_for_encrypt","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","SecretEncryptedString","borrow","borrow_mut","encrypted_string","expose_decrypted_secret","from","into","new_with_secret_string","new_with_string","try_from","try_into","type_id","vzip","SshContext","borrow","borrow_mut","decrypt_from_file_data","decrypted_string","expand_path_check_private_key_exists","from","get_decrypted_string","get_token_and_encrypt","into","new","sign_with_ssh_agent_or_identity_file","signed_passcode_is_a_secret","try_from","try_into","type_id","vzip","ShellCommandLimitedDoubleQuotesSanitizer","ShellCommandLimitedDoubleQuotesSanitizerTrait","arg","arg","arg_secret","arg_secret","borrow","borrow_mut","from","into","new","new","run","run","string_to_echo","string_to_execute","template","try_from","try_into","type_id","vzip"],"q":[[0,"podman_ssh_auth_lib"],[11,"podman_ssh_auth_lib::error_mod"],[35,"podman_ssh_auth_lib::podman_mod"],[37,"podman_ssh_auth_lib::secrets_always_local_mod"],[42,"podman_ssh_auth_lib::secrets_always_local_mod::decrypt_mod"],[56,"podman_ssh_auth_lib::secrets_always_local_mod::docker_hub_mod"],[72,"podman_ssh_auth_lib::secrets_always_local_mod::encrypt_mod"],[85,"podman_ssh_auth_lib::secrets_always_local_mod::secrecy_mod"],[98,"podman_ssh_auth_lib::secrets_always_local_mod::ssh_mod"],[115,"podman_ssh_auth_lib::shell_mod"],[136,"core::fmt"],[137,"core::fmt"],[138,"core::num::error"],[139,"core::convert"],[140,"core::error"],[141,"core::option"],[142,"alloc::string"],[143,"core::result"],[144,"core::any"],[145,"cargo_auto_encrypt_secret_lib"],[146,"secrecy::vec"],[147,"secrecy::string"],[148,"camino"],[149,"camino"]],"d":["ANSI color","ANSI color","ANSI color","ANSI color","ANSI color","Error library for this crate using thiserror","store the docker hub token securely encrypted with a SSH …","","push to docker hub retrieving the token from encrypted file","","","Contains the error value","","","","Enum of possible errors from this library","Contains the success value","","Result type alias with fixed LibError using thiserror","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","store the docker hub token securely encrypted with a SSH …","push to docker hub retrieving the token from encrypted file","Secrets like GitHub API token, docker hub token, SSH …","Push to docker-hub needs the docker hub token. This is a …","","The crate secrecy is probably great. But I want to encrypt …","","The secrets must not leave this crate. They are never …","","","Decrypts encrypted_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Struct DockerHubClient contains only private fields This …","","","decrypts the secret token in memory","private field is set only once in the new() constructor","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new DockerHub client","Use the stored docker hub token","Create new DockerHub client without token","Push to docker hub","Passcode for encrypt the token_is_a_secret to …","","","","","The secrets must not leave this crate. They are never …","","","Encrypts secret_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","decrypt from file data and write the decrypted secret in …","","Expand path and check if identity file exists","Returns the argument unchanged.","","get token and encrypt","Calls <code>U::from(self)</code>.","","Sign with ssh-agent or with identity_file","","","","","","Shell command builder with simple but limited sanitizer","Trait with methods for …","Replace placeholders with the value","Replace placeholders with the value","Just like arg(), but for secrets that must be not echoed …","Just like arg(), but for secrets that must be not echoed …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Template for the shell command with placeholders","Template for the shell command with placeholders","Run the sanitized command with no additional checks","Run the sanitized command with no additional checks","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,28,3,3,3,0,28,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,0,0,26,27,26,27,27,27,27,27,26,27,26,27,27,27,27,27,27,27,27],"f":"``````{{bb}d}`{bd}```````````{ce{}{}}0{{fh}j}0{cc{}}{lf}{nf}{A`f}5{f{{Ad{Ab}}}}{cAf{}}{c{{Ah{e}}}{}{}}0{cAj{}}9;:``````99{{AlAn}d}8:{{{Bb{B`}}}Al}{AlBd}``443<`<<{BfBd}`;={{}Bf}{{bb}Bf}1{{Bfbb}d}`887{ce{}{}}`00{Bh{{Ad{An}}}}{cc{}}2{{Bd{Bb{B`}}}Bh}``<<;3`33`{{Bj{Bb{B`}}}Bd}24{{Bd{Bb{B`}}}Bj}{{Af{Bb{B`}}}Bj}??>6`66{{BlAn}d}`{BnC`}6{BlBd}{BlAn}:{{}Bl}{{BlBn{Cb{B`}}}d}`{c{{Ah{e}}}{}{}}0{cAj{}}>``{{Cdbb}{{Ah{Cdf}}}}{{Cfbb}{{Ah{Cff}}}}{{CdbBd}{{Ah{Cdf}}}}{{CfbBd}{{Ah{Cff}}}}{ce{}{}}0{cc{}}1{b{{Ah{Cdf}}}}{b{{Ah{Cff}}}}{Cd{{Ah{df}}}}{Cf{{Ah{df}}}}```;;:5","c":[],"p":[[1,"str"],[1,"unit"],[6,"LibError",11],[5,"Formatter",136],[8,"Result",136],[5,"Error",137],[5,"ParseIntError",138],[6,"Infallible",139],[10,"Error",140],[6,"Option",141],[5,"String",142],[6,"Result",143],[5,"TypeId",144],[5,"Decryptor",42],[5,"EncryptedString",145],[1,"u8"],[8,"SecretVec",146],[8,"SecretString",147],[5,"DockerHubClient",56],[5,"Encryptor",72],[5,"SecretEncryptedString",85],[5,"SshContext",98],[5,"Utf8Path",148],[5,"Utf8PathBuf",148],[1,"array"],[10,"ShellCommandLimitedDoubleQuotesSanitizerTrait",115],[5,"ShellCommandLimitedDoubleQuotesSanitizer",115],[8,"ResultWithLibError",11]],"b":[[22,"impl-Debug-for-LibError"],[23,"impl-Display-for-LibError"],[25,"impl-From%3CError%3E-for-LibError"],[26,"impl-From%3CParseIntError%3E-for-LibError"],[27,"impl-From%3CInfallible%3E-for-LibError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
